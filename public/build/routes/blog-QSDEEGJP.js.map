{
  "version": 3,
  "sources": ["../../../node_modules/scriptjs/dist/script.js", "../../../node_modules/react-twitter-embed/src/components/twiter-widget-url.ts", "../../../node_modules/react-twitter-embed/src/components/TwitterTimelineEmbed.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterShareButton.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterFollowButton.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterHashtagButton.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterMentionButton.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterTweetEmbed.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterMomentShare.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterDMButton.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterVideoEmbed.tsx", "../../../node_modules/react-twitter-embed/src/components/TwitterOnAirButton.tsx", "../../../app/components/blog-section.jsx", "../../../app/routes/blog.jsx"],
  "sourcesContent": ["/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n", "const twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\n\nexport default twitterWidgetJs;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterTimelineEmbedBase {\n  /**\n   * Additional options to pass to twitter widget plugin\n   */\n  options?: JSONObject;\n  /**\n   * Automatically fit into parent container height\n   */\n  autoHeight?: boolean;\n  /**\n   * With dark or light theme\n   */\n  theme?: 'dark' | 'light';\n  /**\n   * With custom link colors. Note: Only Hex colors are supported.\n   */\n  linkColor?: string;\n  /**\n   * With custom border colors. Note: Only Hex colors are supported.\n   */\n  borderColor?: string;\n  /**\n   * Hide the header from timeline\n   */\n  noHeader?: boolean;\n  /**\n   * Hide the footer from timeline\n   */\n  noFooter?: boolean;\n  /**\n   * Hide the border from timeline\n   */\n  noBorders?: boolean;\n  /**\n   * Hide the scrollbars\n   */\n  noScrollbar?: boolean;\n  /**\n   * Enable Transparancy\n   */\n  transparent?: boolean;\n  /**\n   * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n   */\n  lang?: string;\n  /**\n   * ariaPolite\n   */\n  ariaPolite?: 'polite' | 'assertive' | 'rude';\n  /**\n   * Limit of tweets to be shown\n   */\n  tweetLimit?: number;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nexport interface TwitterTimelineEmbedSourceScreenName\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of profile, likes\n   */\n  sourceType: 'profile' | 'likes';\n  /**\n   * username of twitter handle as String\n   */\n  screenName: string;\n}\n\nexport interface TwitterTimelineEmbedSourceUserId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of profile, likes\n   */\n  sourceType: 'profile' | 'likes';\n  /**\n   * UserId of twitter handle as number\n   */\n  userId: string;\n}\n\nexport interface TwitterTimelineEmbedSourceTimeline\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of timeline\n   */\n  sourceType: 'timeline';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string;\n}\n\nexport interface TwitterTimelineEmbedSourceTimelineWidget\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of timeline\n   */\n  sourceType: 'timeline';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  widgetId: string;\n}\n\nexport interface TwitterTimelineEmbedSourceList\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of list\n   */\n  sourceType: 'list';\n  /**\n   * To show list, used along with slug\n   */\n  ownerScreenName: string;\n  /**\n   * To show list, used along with ownerScreenName\n   */\n  slug: string;\n}\n\nexport interface TwitterTimelineEmbedSourceListId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of list\n   */\n  sourceType: 'list';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string | number;\n}\n\nexport interface TwitterTimelineEmbedSourceCollectionId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be collection\n   */\n  sourceType: 'collection';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string | number;\n}\n\nexport interface TwitterTimelineEmbedSourceCollectionUrl\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be collection\n   */\n  sourceType: 'collection';\n  /**\n   * To show list, unique list url\n   * Also used with collections, in that case its valid collection id\n   */\n  url: string;\n}\n\nexport interface TwitterTimelineEmbedSourceUrl\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be url\n   */\n  sourceType: 'url';\n  /**\n   * To show twitter content with url.\n   * Supported content includes profiles, likes, lists, and collections.\n   */\n  url: string;\n}\n\nexport interface TwitterTimelineEmbedSourceWidget\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be widget\n   */\n  sourceType: 'widget';\n  /**\n   * To show custom widget\n   */\n  widgetId: string;\n}\n\nexport type TwitterTimelineEmbedPropsType =\n  | TwitterTimelineEmbedSourceScreenName\n  | TwitterTimelineEmbedSourceUserId\n  | TwitterTimelineEmbedSourceTimeline\n  | TwitterTimelineEmbedSourceTimelineWidget\n  | TwitterTimelineEmbedSourceList\n  | TwitterTimelineEmbedSourceListId\n  | TwitterTimelineEmbedSourceCollectionId\n  | TwitterTimelineEmbedSourceCollectionUrl\n  | TwitterTimelineEmbedSourceUrl\n  | TwitterTimelineEmbedSourceWidget;\n\n// export interface TwitterTimelineEmbedProps {\n//   sourceType: 'profile' | 'likes' | 'list' | 'collection' | 'URL' | 'widget'\n//   url: string;\n//   options?: JSONObject,\n//   placeholder?: string | React.ReactNode;\n//   onLoad?: (element: any) => void;\n// };\n\nconst methodName = 'createTimeline';\n\nconst TwitterTimelineEmbed = (props: TwitterTimelineEmbedPropsType): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  const buildOptions = () => {\n    let options = Object.assign({}, props.options);\n    if (props?.autoHeight) {\n      options.height = (ref.current?.parentNode as HTMLElement)?.offsetHeight;\n    }\n\n    options = Object.assign({}, options, {\n      theme: props?.theme,\n      linkColor: props?.linkColor,\n      borderColor: props?.borderColor,\n      lang: props?.lang,\n      tweetLimit: props?.tweetLimit,\n      ariaPolite: props?.ariaPolite\n    });\n\n    return options;\n  };\n\n  const buildChromeOptions = (options: JSONObject) => {\n    options.chrome = '';\n    if (props.noHeader) {\n      options.chrome = options.chrome + ' noheader';\n    }\n    if (props.noFooter) {\n      options.chrome = options.chrome + ' nofooter';\n    }\n    if (props.noBorders) {\n      options.chrome = options.chrome + ' noborders';\n    }\n    if (props.noScrollbar) {\n      options.chrome = options.chrome + ' noscrollbar';\n    }\n    if (props.transparent) {\n      options.chrome = options.chrome + ' transparent';\n    }\n\n    return options;\n  };\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        let options = buildOptions();\n        /** Append chrome options */\n        options = buildChromeOptions(options);\n\n        window.twttr.widgets[methodName](\n          {\n            // @ts-ignore\n            sourceType: props.sourceType,\n            // @ts-ignore\n            screenName: props.screenName,\n            // @ts-ignore\n            userId: props.userId,\n            // @ts-ignore\n            ownerScreenName: props.ownerScreenName,\n            // @ts-ignore\n            slug: props.slug,\n            // @ts-ignore\n            id: props.id || props.widgetId,\n            // @ts-ignore\n            url: props.url\n          },\n          ref?.current,\n          options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterTimelineEmbed;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterShareButtonProps {\n  /**\n   * Url for sharing\n   */\n  url: string;\n  /**\n   * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createShareButton';\n\nconst TwitterShareButton = (props: TwitterShareButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.url,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterShareButton;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterFollowButtonProps {\n  /**\n   * Username of twitter user which will be followed on click\n   */\n  screenName: string;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createFollowButton';\n\nconst TwitterFollowButton = (props: TwitterFollowButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.screenName,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterFollowButton;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterHashtagButtonProps {\n  /**\n   * Tag name for hashtag button\n   */\n  tag: string;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createHashtagButton';\n\nconst TwitterHashtagButton = (props: TwitterHashtagButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.tag,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterHashtagButton;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterMentionButtonProps {\n  /**\n   * Username to which you will need to tweet\n   */\n  screenName: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createMentionButton';\n\nconst TwitterMentionButton = (props: TwitterMentionButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.screenName,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterMentionButton;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterTweetEmbedProps {\n  /**\n   * Tweet id that needs to be shown\n   */\n  tweetId: string;\n  /**\n   * Additional options to pass to twitter widget plugin\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createTweet';\n\nconst TwitterTweetEmbed = (props: TwitterTweetEmbedProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.tweetId,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterTweetEmbed;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterMomentShareProps {\n  /**\n   * id of Twitter moment to show\n   */\n  momentId: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createMoment';\n\nconst TwitterMomentShare = (props: TwitterMomentShareProps) => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.momentId,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterMomentShare;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterDMButtonProps {\n  /**\n   * Twitter user id for DM button\n   */\n  id: number;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createDMButton';\n\nconst TwitterDMButton = (props: TwitterDMButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.id,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          if (isComponentMounted) {\n            setLoading(false);\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterDMButton;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\nexport interface TwitterVideoEmbedProps {\n  /**\n   * Id of video tweet.\n   */\n  id: string;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createVideo';\n\nconst TwitterVideoEmbed = (props: TwitterVideoEmbedProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](props.id, ref?.current).then(\n          (element: any) => {\n            setLoading(false);\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        );\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterVideoEmbed;\n", "import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterOnAirButtonProps {\n  /**\n   * Username for which you require periscope on air button\n   */\n  username: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createPeriscopeOnAirButton';\n\nconst TwitterOnAirButton = (props: TwitterOnAirButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.username,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterOnAirButton;\n", "import { TwitterTweetEmbed } from 'react-twitter-embed';\nconst posts = [\n    {\n      id: 1,\n      title: 'Nurturing Connections: The Heartbeat of Hospitality \uD83C\uDFE8',\n      href: '#',\n      description:\n      'Embracing the warmth of hospitality: where every smile is a welcome, every gesture is a comfort, and every guest is family. Join us in creating moments of genuine connection and unforgettable experiences. #HospitalityMagic \u2728\uD83C\uDFE8 #GuestsFirst #ServiceExcellence',\n      date: 'Mar 16, 2020',\n      datetime: '2020-03-16',\n      category: { title: 'Hospitality', href: '#' },\n      author: {\n        name: 'Jovita Ateya',\n        role: 'Co-Founder',\n        href: '#',\n        imageUrl:\n          'https://images.unsplash.com/photo-1519244703995-f4e0f30006d5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n      },\n    },\n    {\n        id: 2,\n        title: 'Unlocking Excellence: Elevate Your Business with Hospitality Consultancy',\n        href: '#',\n        description:\n          'Transform your hospitality venture with expert guidance. Our consultancy brings tailored strategies for exceptional guest experiences, operational efficiency, and growth. Elevate your business in a competitive market! \uD83C\uDFE8\u2728 #HospitalityConsultancy #BusinessSuccess',\n        date: 'June 3, 2022',\n        datetime: '2020-03-6',\n        category: { title: 'Training', href: '#' },\n        author: {\n          name: 'Esau Odeny',\n          role: 'Co-Founder ',\n          href: '#',\n          imageUrl:\n            'https://images.unsplash.com/photo-1519244703995-f4e0f30006d5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n        },\n      },\n      {\n        id: 3,\n        title: 'Crafting Excellence: Empowering Through Comprehensive Hospitality Training',\n        href: '#',\n        description:\n          'Elevate service standards through specialized hospitality training. Equip your team with the skills to deliver unforgettable guest experiences, setting new benchmarks in excellence. \uD83C\uDF1F\uD83C\uDFE8 #HospitalityTraining #ServiceExcellence',\n        date: 'Mar 16, 2023',\n        datetime: '2023-03-16',\n        category: { title: 'Consultancy', href: '#' },\n        author: {\n          name: 'Nasiku Small',\n          role: 'Co-Founder',\n          href: '#',\n          imageUrl:\n            'https://images.unsplash.com/photo-1519244703995-f4e0f30006d5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n        },\n      },\n    // More posts...\n  ]\n  \nexport default function (){\n\n    return (\n\n\n\n        \n        <div className=\"bg-white py-24 sm:py-32\">\n      <div className=\"mx-auto max-w-7xl px-6 lg:px-8\">\n      \n        <div className=\"mx-auto max-w-2xl lg:mx-0\">\n          <h2 className=\"text-3xl font-bold tracking-tight text-red-600 sm:text-4xl\">From the blog</h2>\n          <p className=\"mt-2 text-lg leading-8 text-gray-600\">\n            Learn how to grow your business with our expert consultancy advice.\n          </p>\n        </div>\n        <div className=\"mx-auto mt-10 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 border-t border-gray-200 pt-10 sm:mt-16 sm:pt-16 lg:mx-0 lg:max-w-none lg:grid-cols-3\">\n          \n\n        <div>\n      <TwitterTweetEmbed tweetId=\"1690982594865741827\" />\n    </div>\n    <div>\n      <TwitterTweetEmbed tweetId=\"1690970414611132416\" />\n    </div>\n    <div>\n      <TwitterTweetEmbed tweetId=\"1691001319488618496\" />\n    </div>\n    \n          {posts.map((post) => (\n            <article key={post.id} className=\"flex max-w-xl flex-col items-start justify-between\">\n              <div className=\"flex items-center gap-x-4 text-xs\">\n                <time dateTime={post.datetime} className=\"text-gray-500\">\n                  {post.date}\n                </time>\n                <a\n                  href={post.category.href}\n                  className=\"relative z-10 rounded-full bg-gray-50 px-3 py-1.5 font-medium text-red-600 hover:bg-gray-100\"\n                >\n                  {post.category.title}\n                </a>\n              </div>\n              <div className=\"group relative\">\n                <h3 className=\"mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600\">\n                  <a href={post.href}>\n                    <span className=\"absolute inset-0 \" />\n                    {post.title}\n                  </a>\n                </h3>\n                <p className=\"mt-5 line-clamp-3 text-sm leading-6 text-gray-600\">{post.description}</p>\n              </div>\n              <div className=\"relative mt-8 flex items-center gap-x-4\">\n                <img src={post.author.imageUrl} alt=\"\" className=\"h-10 w-10 rounded-full bg-gray-50\" />\n                <div className=\"text-sm leading-6\">\n                  <p className=\"font-semibold text-gray-900\">\n                    <a href={post.author.href}>\n                      <span className=\"absolute inset-0\" />\n                      {post.author.name}\n                    </a>\n                  </p>\n                  <p className=\"text-red-600\">{post.author.role}</p>\n                </div>\n              </div>\n            </article>\n          ))}\n        </div>\n      </div>\n    </div>\n    \n    )\n}", "import Header from \"../components/header\";\nimport Blog_Section from \"../components/blog-section\";\nexport default function Blog (){\nreturn(\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\n    <Header/>\n    <Blog_Section/>\n    </div>\n);\n}"],
  "mappings": "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",
  "names": ["scripts", "s", "twitterWidgetJs", "methodName", "TwitterTweetEmbed", "props", "ref", "React", "useRef", "useState", "loading", "setLoading", "useEffect", "isComponentMounted", "script", "require", "twitterWidgetJs", "window", "twttr", "console", "error", "widgets", "tweetId", "current", "options", "then", "element", "onLoad", "Fragment", "placeholder", "import_jsx_dev_runtime"]
}
